// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplicationTnsClub.DB;

#nullable disable

namespace WebApplicationTnsClub.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250112195822_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonements.GroupAbonement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("countofsession");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datebegin");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateend");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("GroupClubId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("LengthDays")
                        .HasColumnType("integer")
                        .HasColumnName("lengthdays");

                    b.Property<string>("LengthStr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lengthstr");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("GroupClubId");

                    b.ToTable("GroupAbonements");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonements.IndividualAbonement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("countofsession");

                    b.Property<DateTime>("DateBegin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datebegin");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateend");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int>("LengthDays")
                        .HasColumnType("integer")
                        .HasColumnName("lengthdays");

                    b.Property<string>("LengthStr")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lengthstr");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("IndividualAbonements");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Club", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Logofile")
                        .HasColumnType("text")
                        .HasColumnName("logofile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.GroupClub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupClubs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.News", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<string>("ImageFile")
                        .HasColumnType("text")
                        .HasColumnName("imagefile");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ClubId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.PriceSessions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IndividualAbonementId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<long?>("PriceSessionsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SheduleClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Time")
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.Property<int?>("TypeOfDay")
                        .HasColumnType("integer")
                        .HasColumnName("typeofday");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("IndividualAbonementId");

                    b.HasIndex("PriceSessionsId");

                    b.HasIndex("SheduleClubId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.SheduleClub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("SheduleClubs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Bookings.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Length")
                        .HasColumnType("text")
                        .HasColumnName("length");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int?>("StateBooking")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Time")
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Visit")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visit");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.GroupAbonementOfPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AbonementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool?>("IsAutorenewal")
                        .HasColumnType("boolean")
                        .HasColumnName("isautorenewal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<DateTime?[]>("Visits")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("visits");

                    b.HasKey("Id");

                    b.HasIndex("AbonementId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GroupAbonementsOfPalyers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.IndividualAbonementOfPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AbonementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool?>("IsAutorenewal")
                        .HasColumnType("boolean")
                        .HasColumnName("isautorenewal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<DateTime?[]>("Skips")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("skips");

                    b.Property<DateTime?[]>("Visits")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("visits");

                    b.HasKey("Id");

                    b.HasIndex("AbonementId");

                    b.HasIndex("CoachId");

                    b.ToTable("IndividualAbonementsOfPlayers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Coach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coachs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Manager", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("IndividualAbonementOfPlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IndividualAbonementOfPlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AvatarFile")
                        .HasColumnType("text")
                        .HasColumnName("avatarfile");

                    b.Property<long?>("CoachId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondName")
                        .HasColumnType("text")
                        .HasColumnName("secondname");

                    b.HasIndex("CoachId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonements.GroupAbonement", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.GroupClub", "GroupClub")
                        .WithMany()
                        .HasForeignKey("GroupClubId");

                    b.Navigation("GroupClub");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Group", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.GroupClub", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Club");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.News", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Author");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.PriceSessions", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Session", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Group", null)
                        .WithMany("Sessions")
                        .HasForeignKey("GroupId");

                    b.HasOne("WebApplicationTnsClub.Models.Abonements.IndividualAbonement", null)
                        .WithMany("Sessions")
                        .HasForeignKey("IndividualAbonementId");

                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.PriceSessions", null)
                        .WithMany("Sessions")
                        .HasForeignKey("PriceSessionsId");

                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.SheduleClub", null)
                        .WithMany("Sessions")
                        .HasForeignKey("SheduleClubId");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.SheduleClub", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Bookings.Booking", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.GroupAbonementOfPlayer", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Abonements.GroupAbonement", "Abonement")
                        .WithMany()
                        .HasForeignKey("AbonementId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Abonement");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.IndividualAbonementOfPlayer", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Abonements.IndividualAbonement", "Abonement")
                        .WithMany()
                        .HasForeignKey("AbonementId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.Navigation("Abonement");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Admin", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Author", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Coach", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Manager", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Parent", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Player", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.IndividualAbonementOfPlayer", null)
                        .WithMany("Players")
                        .HasForeignKey("IndividualAbonementOfPlayerId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.User", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Users.Coach", null)
                        .WithMany("Students")
                        .HasForeignKey("CoachId");

                    b.HasOne("WebApplicationTnsClub.Models.AboutClub.Group", null)
                        .WithMany("Players")
                        .HasForeignKey("GroupId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebApplicationTnsClub.Models.Users.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationTnsClub.Models.Users.Parent", null)
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.HasOne("WebApplicationTnsClub.Models.Users.Player", null)
                        .WithMany("Partners")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonements.IndividualAbonement", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.Group", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.PriceSessions", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AboutClub.SheduleClub", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.IndividualAbonementOfPlayer", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Coach", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Parent", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Users.Player", b =>
                {
                    b.Navigation("Partners");
                });
#pragma warning restore 612, 618
        }
    }
}
