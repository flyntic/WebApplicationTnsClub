// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplicationTnsClub.DB;

#nullable disable

namespace WebApplicationTnsClub.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241210202723_smallChange")]
    partial class smallChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool?>("IsAutorenewal")
                        .HasColumnType("boolean")
                        .HasColumnName("isautorenewal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("Abonements");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AdminUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminUsers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AbonementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime?>("DateOfSale")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_sale");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Length")
                        .HasColumnType("text")
                        .HasColumnName("length");

                    b.Property<long?>("NextId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SheduleClubOpenBookingId")
                        .HasColumnType("bigint");

                    b.Property<int?>("StateBooking")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Time")
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.Property<string>("UserOfSaleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbonementId");

                    b.HasIndex("ClubId");

                    b.HasIndex("NextId");

                    b.HasIndex("PriceId");

                    b.HasIndex("SheduleClubOpenBookingId");

                    b.HasIndex("UserOfSaleId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Club", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Logofile")
                        .HasColumnType("text")
                        .HasColumnName("logofile");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.CoachUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CoachUsers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoachUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("CoachUserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.ManagerUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("ManagerUsers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.News", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<string>("ImageFile")
                        .HasColumnType("text")
                        .HasColumnName("imagefile");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ClubId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.ParentUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ParentUsers");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("Tariff")
                        .HasColumnType("integer")
                        .HasColumnName("tariff");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("GroupId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AbonementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<int?>("Length")
                        .HasColumnType("integer")
                        .HasColumnName("length");

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SheduleClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Time")
                        .HasColumnType("text")
                        .HasColumnName("time");

                    b.Property<int?>("TypeOfDay")
                        .HasColumnType("integer")
                        .HasColumnName("typeofday");

                    b.HasKey("Id");

                    b.HasIndex("AbonementId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PriceId");

                    b.HasIndex("SheduleClubId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("SheduleClubs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClubOpenBooking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<long?>("SheduleClubId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SheduleClubId");

                    b.ToTable("SheduleClubOpenBookings");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("AvatarFile")
                        .HasColumnType("text")
                        .HasColumnName("avatarfile");

                    b.Property<long?>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CoachUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datecreate");

                    b.Property<DateTime?>("DateDelete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datedelete");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateupdate");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("isdeleted");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<long?>("ParentUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondName")
                        .HasColumnType("text")
                        .HasColumnName("secondname");

                    b.HasIndex("BookingId");

                    b.HasIndex("CoachUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.AdminUser", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Booking", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Abonement", null)
                        .WithMany("Bookings")
                        .HasForeignKey("AbonementId");

                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.Booking", "Next")
                        .WithMany()
                        .HasForeignKey("NextId");

                    b.HasOne("WebApplicationTnsClub.Models.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId");

                    b.HasOne("WebApplicationTnsClub.Models.SheduleClubOpenBooking", null)
                        .WithMany("Bookings")
                        .HasForeignKey("SheduleClubOpenBookingId");

                    b.HasOne("WebApplicationTnsClub.Models.User", "UserOfSale")
                        .WithMany()
                        .HasForeignKey("UserOfSaleId");

                    b.Navigation("Club");

                    b.Navigation("Next");

                    b.Navigation("Price");

                    b.Navigation("UserOfSale");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.CoachUser", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Group", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.CoachUser", "CoachUser")
                        .WithMany()
                        .HasForeignKey("CoachUserId");

                    b.Navigation("Club");

                    b.Navigation("CoachUser");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.ManagerUser", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.News", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Author");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.ParentUser", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Price", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.HasOne("WebApplicationTnsClub.Models.Group", null)
                        .WithMany("Prices")
                        .HasForeignKey("GroupId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Session", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Abonement", null)
                        .WithMany("Sessions")
                        .HasForeignKey("AbonementId");

                    b.HasOne("WebApplicationTnsClub.Models.Group", null)
                        .WithMany("Sessions")
                        .HasForeignKey("GroupId");

                    b.HasOne("WebApplicationTnsClub.Models.Price", null)
                        .WithMany("Sessions")
                        .HasForeignKey("PriceId");

                    b.HasOne("WebApplicationTnsClub.Models.SheduleClub", null)
                        .WithMany("Sessions")
                        .HasForeignKey("SheduleClubId");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClub", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClubOpenBooking", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.SheduleClub", "SheduleClub")
                        .WithMany()
                        .HasForeignKey("SheduleClubId");

                    b.Navigation("SheduleClub");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.User", b =>
                {
                    b.HasOne("WebApplicationTnsClub.Models.Booking", null)
                        .WithMany("Users")
                        .HasForeignKey("BookingId");

                    b.HasOne("WebApplicationTnsClub.Models.CoachUser", null)
                        .WithMany("Students")
                        .HasForeignKey("CoachUserId");

                    b.HasOne("WebApplicationTnsClub.Models.Group", null)
                        .WithMany("Players")
                        .HasForeignKey("GroupId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("WebApplicationTnsClub.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationTnsClub.Models.ParentUser", null)
                        .WithMany("Childs")
                        .HasForeignKey("ParentUserId");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Abonement", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Booking", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.CoachUser", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Group", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("Prices");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.ParentUser", b =>
                {
                    b.Navigation("Childs");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.Price", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClub", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebApplicationTnsClub.Models.SheduleClubOpenBooking", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
