{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, Input, HostListener, HostBinding } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { visibilityPopup } from '../../services/animations.service';\nlet MenuItemComponent = class MenuItemComponent {\n  constructor(menuService, router, el, renderer) {\n    this.menuService = menuService;\n    this.router = router;\n    this.el = el;\n    this.renderer = renderer;\n    this.parentIsPopup = true;\n    this.mouseInPopup = false;\n    this.mouseInItem = false;\n    this.popupLeft = 0;\n    this.popupTop = 42;\n    this.isActiveRoute = false;\n  }\n  ngOnInit() {\n    this.checkingActiveRoute(this.router.url);\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.checkingActiveRoute(event.url);\n      }\n    });\n  }\n  checkingActiveRoute(route) {\n    this.isActiveRoute = route === this.item.route;\n  }\n  onPopupMouseLeave(event) {\n    //  if (!this.menuService.isVertical) {\n    this.mouseInPopup = false;\n    //  }\n  }\n  onPopupMouseEnter(event) {\n    // if (!this.menuService.isVertical) {\n    this.mouseInPopup = true;\n    //  }\n  }\n  onMouseLeave(event) {\n    // if (!this.menuService.isVertical) {\n    this.mouseInItem = false;\n    // }\n  }\n  onMouseEnter() {\n    // if (!this.menuService.isVertical) {\n    if (this.item.submenu) {\n      this.mouseInItem = true;\n      if (this.parentIsPopup) {\n        this.popupLeft = 160;\n        this.popupTop = 0;\n      }\n    }\n    // }\n  }\n  onClick(event) {\n    event.stopPropagation();\n    if (this.item.submenu) {\n      //  if (this.menuService.isVertical) {\n      this.mouseInPopup = !this.mouseInPopup;\n      //  }\n    } else if (this.item.route) {\n      const newEvent = new MouseEvent('mouseleave', {\n        bubbles: true\n      });\n      //   this.renderer.selectRootElement(this.el.nativeElement, 'dispatchEvent', [newEvent]);\n      this.router.navigate([this.item.route]);\n    }\n  }\n};\n__decorate([Input()], MenuItemComponent.prototype, \"item\", void 0);\n__decorate([HostBinding('class.parent-for-popup'), Input()], MenuItemComponent.prototype, \"parentIsPopup\", void 0);\n__decorate([HostListener('mouseleave', ['$event'])], MenuItemComponent.prototype, \"onMouseLeave\", null);\n__decorate([HostListener('mouseenter')], MenuItemComponent.prototype, \"onMouseEnter\", null);\n__decorate([HostListener('click', ['$event'])], MenuItemComponent.prototype, \"onClick\", null);\nMenuItemComponent = __decorate([Component({\n  selector: 'spa-menu-item',\n  templateUrl: './menu-item.component.html',\n  styleUrls: ['./menu-item.component.css'],\n  animations: [visibilityPopup]\n})], MenuItemComponent);\nexport { MenuItemComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}